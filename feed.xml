<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Christan Fergus Web Designer</title>
    <description></description>
    <link>http://christanfergus.com/</link>
    <atom:link href="http://christanfergus.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 22 Apr 2016 08:18:13 -0600</pubDate>
    <lastBuildDate>Fri, 22 Apr 2016 08:18:13 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Product Card Accessibility</title>
        <description>&lt;h2&gt;Overview&lt;/h2&gt;
&lt;p&gt;Where I work, a constant challenge for our design code base has been making our ecommerce experience accessible to all. “All” means the spectrum spanning from mobile device users all the way across to visually impaired users. In the past, the most common way for a visually impaired user to purchase from our website was to contact our customer service, and have  that team assist with the modifying of the customer’s order.&lt;/p&gt;
&lt;p&gt;This was and is unacceptable.&lt;/p&gt;
&lt;p&gt;My philosophy and approach to UI and UX design is based on the premise that the web is for all, and our designs should not alienate any group. Based on this, we have begun to make concerted efforts to improve the web experience we provide for visually impaired users utilizing screen reader tools.&lt;/p&gt;
&lt;p&gt;While specific efforts to this end have been made in numerous areas of the site, including navigation and general ARIA role hooks, our glaring problem has revolved around the primary point of purchase for our customers: the product card.&lt;/p&gt;

&lt;h2&gt;Challenge&lt;/h2&gt;
&lt;p&gt;The current design was perfectly fine for most of our customers. The product cards had an image, basic info, and gave the customer the ability to purchase the product directly from the card.&lt;/p&gt;
&lt;figure&gt;
	&lt;img src=&quot;http://static.christanfergus.com/images/article-prod-card-accessibility/pa-original.jpg&quot; alt=&quot;An example card display that was introduced in 2013&quot;&gt;
	&lt;figcaption&gt;Fig. 1 - The product card display that was introduced in early 2013 and has been largely unchanged since.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;However, if you view the card as a screen reader might, it may read like this (I say, “may” here since in my experience with JAWS, NVDA, and OSX’s native reader all interpret pages a bit differently):&lt;/p&gt;
&lt;figure&gt;
	&lt;pre&gt;Yogurt Link Graphic Cherry Vanilla Whole Milk Yogurt This page link Preview Product Link Brown Cow Link Cherry Vanilla Whole Milk Yogurt dollars one point nine nine six oz, two pack Expand Link zero Link Buy dash plus&lt;/pre&gt;
	&lt;figcaption&gt;Fig. 2 - Product card Interpreted with Fangs plugin for Firefox&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Less than ideal, right? Imagine trying to navigate through a page with often fifty or more products just like this.&lt;/p&gt;
&lt;p&gt;With the new cards, I understood it was time to remove the barriers that lay between our user and accomplishing their goal of purchasing. It was important to form the content in a way that read clearly, but also allowed the user a way out if they don’t want to completely drill down in the details of each card.&lt;/p&gt;

&lt;header&gt;
	&lt;h2&gt;Solution: Designing an Accessible Product Card&lt;/h2&gt;
	&lt;p&gt;As I have come to learn that as with many things, good accessibility is a journey, not a destination.&lt;/p&gt;
&lt;/header&gt;
&lt;figure&gt;
	&lt;img src=&quot;http://static.christanfergus.com/images/article-prod-card-accessibility/pa-updated.jpg&quot; alt=&quot;The new card has an updated, more spacious design with less clutter&quot;&gt;
	&lt;figcaption&gt;Fig. 3 - The updated design gives more space to the UI, but also adds some additional, accessible benefits.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;All the &quot;Hiddens&quot; &amp;amp; Shortcuts&lt;/h3&gt;
&lt;p&gt;To make the card easily consumable to users with and without a screen reader, yet minimize duplicated code, a few layout decisions were made. My team’s first idea was to give screen readers an overview of the product card before actually drilling down through it. To accomplish this, we set the product name and a “jump-to-next product card” link as the first markup for every card. The idea behind this was to alleviate the user having to navigate all the way through each card’s tree just to skip to the next product.&lt;/p&gt;
&lt;figure&gt;
&lt;pre&gt;
|-Area (div) containing,
|----Linked image
|----Buttons (purchasing actions)
|-Item brand name (link)
|-Item name (link)
|-Item price
|-Item regular price (only visible if on sale)
&lt;/pre&gt;
	&lt;figcaption&gt;Fig. 4 - A typical markup tree looks like this&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Note that you don’t get to the product name until three nodes down. Then to move on to the next card, you’d need to continue tabbing through prices and potentially other buttons (given on the card’s purchasing state). The structure, while it makes sense from a visual point of view, does not make sense if you are reading linearly through the markup.&lt;/p&gt;

&lt;p&gt;The solution was to add a product preview of sorts. Upon entering a new card, the user is read the title of the product and then immediately given the option to jump to the next product. If they want to know more about the product, then they can continue to tab through the card for more information and even purchase.&lt;/p&gt;

&lt;p&gt;To make this happen, we gave the UI-visible product brand and title the ARIA role of “hidden”. While not supported or treated exactly the same by all readers, this would potentially hide the title that shows up in the UI from the screen reader. Given that the screen reader had already read the product title, this seemed appropriate not to repeat. This was the result:&lt;/p&gt;
&lt;figure&gt;
&lt;pre&gt;
|-Item brand [hidden from UI]
|-Item name/title [hidden from UI]
|-Jump to next product link [hidden from UI]
|-Area (div) containing
|----linked image
|----Buttons [purchasing actions]
|-Item brand name [hidden from screen reader with aria-hidden=”true”]
|-Item name [aria-hidden=”true”]
|-Item price
&lt;/pre&gt;
&lt;figcaption&gt;Fig. 5 - The new markup tree&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
	&lt;img src=&quot;http://static.christanfergus.com/images/article-prod-card-accessibility/pa-hidden.jpg&quot; alt=&quot;Normally hidden links are displayed to show how they are present on the card&#39;s markup&quot;&gt;
	&lt;figcaption&gt;Fig 6 - Example of links that are hidden from the UI (normally) but available to screen readers&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;	
&lt;pre&gt;&lt;code&gt;border: 0; 
clip: rect(0 0 0 0);
height: 1px;
margin: -1px;
overflow: hidden;
padding: 0;
position: absolute;
width: 1px;&lt;/code&gt;&lt;/pre&gt;
&lt;figcaption&gt;Fig. 7 - Visually hide elements&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Navigation &amp;amp; :focus&lt;/h3&gt;
&lt;p&gt;Even though we had implemented the ability to skip through the cards without forcing the screen reader through every node, we weren’t quite there yet. It was necessary to underpin this navigation with a little JavaScript to add a unique ID to each card enabling the “jump to next product” link to work correctly. By doing so, we were then able to dynamically provide an anchor for the jump-to link. When the user chooses that link, focus is placed on the next card’s hidden product title. The title is read to them, and upon hitting tab, they would then hear the link to jump to the next card. If the user chooses too, they could navigate the entire product list with this technique. &lt;/p&gt;
&lt;figure&gt;
&lt;pre&gt;&lt;div class=&quot;code&quot;&gt;
&lt;span class=&quot;Element&quot;&gt;&amp;lt;div&amp;nbsp;class=&quot;card&quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;span class=&quot;Element&quot;&gt;&amp;lt;a&amp;nbsp;href=&quot;product-url&quot;&amp;nbsp;class=&quot;is-visually-hidden&quot;&amp;gt;&lt;/span&gt;Product&amp;nbsp;Title&amp;nbsp;X&lt;span class=&quot;Element&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;span class=&quot;Element&quot;&gt;&amp;lt;a&amp;nbsp;href=&quot;card1&quot;&amp;nbsp;class=&quot;is-visually-hidden&quot;&amp;gt;&lt;/span&gt;Jump&amp;nbsp;to&amp;nbsp;next&amp;nbsp;product&lt;span class=&quot;Element&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br /&gt;
...
&lt;span class=&quot;Element&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;br /&gt;
&lt;span class=&quot;Element&quot;&gt;&amp;lt;div&amp;nbsp;class=&quot;card&quot;&amp;gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;span class=&quot;Element&quot;&gt;&amp;lt;a&amp;nbsp;href=&quot;product-url&quot;&amp;nbsp;class=&quot;is-visually-hidden&quot;&amp;gt;&lt;/span&gt;Product&amp;nbsp;Title&amp;nbsp;Y&lt;span class=&quot;Element&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br /&gt;
&amp;nbsp;&amp;nbsp;&lt;span class=&quot;Element&quot;&gt;&amp;lt;a&amp;nbsp;href=&quot;card1&quot;&amp;nbsp;class=&quot;is-visually-hidden&quot;&amp;gt;&lt;/span&gt;Jump&amp;nbsp;to&amp;nbsp;next&amp;nbsp;product&lt;span class=&quot;Element&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;&lt;br /&gt;
...
&lt;span class=&quot;Element&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/div&gt;&lt;/pre&gt;
&lt;figcaption&gt;Fig. 8&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In many cases, we were initially loading a minimal number of products for better performance. In that case we provided a “load more” button. Upon selecting the load more button, focus is placed immediately on the next product’s hidden link title, and the user is able to continue navigating the cards like they were previously. 
&lt;/p&gt;

&lt;p&gt;A minor drawback to this approach, however, was that we were making an experience now for screen readers, and somewhat neglecting the sighted experience. In this case, a sighted user who liked to use a keyboard over a mouse, for instance, would potentially see, as they tabbed through the cards, a key press where nothing happens. The reason behind this is that the very first tab into a card selected the hidden title. To provide the sighted user with feedback, we again utilized javascript to add a class of “active” to the entire product card region when any element in that card had focus. By doing so, upon tabbing to the first, hidden link, the entire card gains a class, on to which we hook some styling to give that visual feedback. 
&lt;/p&gt;
&lt;p&gt;With this technique, even if the user then hit “enter”, they would be taken to the product itself since the top hidden link we provide for accessibility. While they may not have exactly wanted to do that, they would still be within the context of the product, thus keeping the user experience within a safe margin of expectation. 
&lt;/p&gt;

&lt;h3&gt;Live Regions&lt;/h3&gt;
&lt;p&gt;Another feature I had been anxious to work with was ARIA live regions. On our card, we had two buttons serving as an incrementer and a decrementer. When the user interacted with the buttons, the quantity selected appeared in the center of the card. This posed a challenge for readers. While the reader would come across the form buttons and give the ability to increment or decrement, no feedback was natively given. Thus the user had no way of easily knowing what the quantity in their cart was. 
&lt;/p&gt;
&lt;p&gt;A way to solve this is by using ARIA’s live region attribute. By setting the quantity wrapper to have a (in this case) aria-live=”polite”, the user could be notified of a change to that area and the value read aloud. So, when the user pressed the “add” button, for instance, the value changed to “1”, thus “One” is said aloud. 
&lt;/p&gt;

&lt;h2&gt;Conclusion &amp;amp; Going Forward&lt;/h2&gt;
&lt;p&gt;We were able to achieve this success and a better un-sighted experience with no compromise to the sighted user’s experience either. This extra effort also had minimal impact on the overall project’s timeline, again supporting the decision my team had made to bring accessibility to the front of our minds and development, even including accessibility features as a definition of done. Initial user tests of this technique indicated the experience had improved for our customers who used screen reader tools. As the card continues to live in the “wild” we will continue to monitor its successes and failures by tracking data and implementing on-going user tests.&lt;/p&gt;

&lt;p&gt;It’s worth also noting that our website is big, and there are still many areas of improvement. But, by incorporating accessibility enhancement in our projects moving forward, we move toward a more accessible experience for our entire customer base. It’s also worth noting that this effort is not just a way for us to make more money. At last count we had less than twenty customers actively using screen readers on our site out of a customer base comprised of many thousands. A major reason a visually impaired user would use our service is it can make their life a tad easier by having their groceries delivered. The irony is that if our site is not useable to them, the service that can help them isn’t of much good either. This just motivates me more with the belief that the web is for everyone, and accessible websites is a right, not a privilege.&lt;/p&gt;</description>
        <pubDate>Sun, 10 Apr 2016 00:00:00 -0600</pubDate>
        <link>http://christanfergus.com/product-card-accessibility</link>
        <guid isPermaLink="true">http://christanfergus.com/product-card-accessibility</guid>
        
        <category>accessibility,</category>
        
        <category>user</category>
        
        <category>experience,</category>
        
        <category>screen</category>
        
        <category>readers,</category>
        
        <category>web</category>
        
        <category>development,</category>
        
        <category>user</category>
        
        <category>interface</category>
        
        
        <category>web</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Automated Image Optimization</title>
        <description>&lt;h2 id=&quot;identifying-the-need&quot;&gt;Identifying the Need&lt;/h2&gt;
&lt;p&gt;We find ourselves heading further down the road of our web pages and apps being served up on varying and often sketchy devices and networks. The importance of serving up lean applications has become not a luxury, but necessity. In this arena, images are one of the biggest and easiest areas a web designer can hack off kilobytes and boost page load times. Furthermore, with responsive applications, we are often serving up the same image in varying sizes to leverage screen sizes, data connections, etc.&lt;/p&gt;

&lt;p&gt;Handling all this image resizing manually is no way to go, and only for those who enjoy a little self-inflicted pain. While there are dedicated tools that can do this, especially server side, often it makes sense to deal with the optimization locally. This is where task runners come in super handy. In our case, Grunt.&lt;/p&gt;

&lt;h2 id=&quot;only-use-it-when-you-need-it&quot;&gt;Only Use It When You Need It&lt;/h2&gt;
&lt;p&gt;Recently, the need for such image optimization arose. It’s worth noting at this point that, philosophically, I don’t ever add a tool until I need it—helps keep the cruft down. However, staring at over 500 images requiring at least two different size variations quickly launched me head-first into optimization world.&lt;/p&gt;

&lt;p&gt;The following is my optimization workflow on Mac. I also assume creating a project from complete scratch. This is what works for me, but it may not be what you want. I included my sources below (I didn’t come up with any of this) so you can figure a workflow out for yourself that suits your needs.&lt;/p&gt;

&lt;h3 id=&quot;ingredients-youll-need&quot;&gt;Ingredients You’ll Need&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;OSX&lt;/li&gt;
  &lt;li&gt;Node&lt;/li&gt;
  &lt;li&gt;Grunt&lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;Imagemagick&lt;/li&gt;
  &lt;li&gt;Patience&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;install-grunt&quot;&gt;Install Grunt&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Ensure you have installed Node, and are inside the directory in which you wish to optimize images.&lt;/li&gt;
  &lt;li&gt;Install Grunt.
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;npm install -g grunt-cli&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the Grunt initializer tool to create Gruntfile.js and packages.json (very handy but optional).
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;npm install -g grunt-init&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Now initialize the files.
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;grunt-init-gruntfile&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You now have Grunt prepped and ready, but you’ll need to modify the Gruntfile.js before it works. You may want to strip out everything the initializer did at first to just get your image optimization task working correctly. Further down is an example.&lt;/p&gt;

&lt;h3 id=&quot;install-image-sizing-tasks&quot;&gt;Install Image Sizing Tasks&lt;/h3&gt;
&lt;p&gt;The primary techniques followed here are shamelessly from &lt;a href=&quot;https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick&quot;&gt;this Smashing Magazine article&lt;/a&gt;. You will want to learn a bit more about what’s actually happening when you start optimizing your images. You will also want to know how to configure the out-of-the-box installation. Do that &lt;a href=&quot;https://github.com/nwtn/grunt-respimg&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Install Grunt image sizing
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;npm install grunt-respimg --save-dev&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Install ImageMagick (with homebrew)
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;brew install imagemagick&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;Edit your Gruntfile.js. In this case we are not using the additional image sizing tools. &lt;a href=&quot;https://github.com/nwtn/grunt-respimg&quot;&gt;Reference&lt;/a&gt; for more information.&lt;/li&gt;
  &lt;li&gt;Run your task
    &lt;pre&gt;&lt;code&gt;&lt;span class=&quot;prompt&quot;&gt;$&lt;/span&gt; &lt;span&gt;grunt&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;example-grunfilejs&quot;&gt;Example Grunfile.js&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/*global module:false*/
module.exports = function(grunt) {

  // Project configuration.
  grunt.initConfig({
    // Task configuration.
    respimg: {
      nooptim: {
        options: {
          optimize: false,
          widths: [960, 420]
        },
        files: [{
          expand: true,
          // Be sure to get your own paths correct
          cwd: &#39;images/source/&#39;,
          src: [&#39;**.{gif,jpg,png,svg}&#39;],
          // Be sure to get your own paths correct
          dest: &#39;images/output/&#39;
        }]
      }
    }
  });

  grunt.loadNpmTasks(&#39;grunt-respimg&#39;); 

  // Default task.
  grunt.registerTask(&#39;default&#39;, [&#39;respimg&#39;]);
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.imagemagick.org/script/index.php&quot;&gt;Imagemagick&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.smashingmagazine.com/2015/06/efficient-image-resizing-with-imagemagick&quot;&gt;Smashing Mag article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/nwtn/grunt-respimg&quot;&gt;Grunt task featured in the above article&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fergd/ImageResize&quot;&gt;My Github page for experimenting with this&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 16 Jan 2016 00:00:00 -0700</pubDate>
        <link>http://christanfergus.com/bulk-image-optimization-with-grunt</link>
        <guid isPermaLink="true">http://christanfergus.com/bulk-image-optimization-with-grunt</guid>
        
        <category>grunt,</category>
        
        <category>image</category>
        
        <category>optimization,</category>
        
        <category>images,</category>
        
        <category>imagemagick</category>
        
        
        <category>web</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Diary Of A Meteor App Project</title>
        <description>&lt;h2 id=&quot;for-starters&quot;&gt;For Starters…&lt;/h2&gt;

&lt;p&gt;This post is more of a case-study and chronicle of my experience with Meteor, and less of a how-to. The nice thing about Meteor is that the community is quite large and there are tens if not hundreds of tutorials out there. I thought it might be good to describe my experience more than the technical side in hope that it can help paint a broader picture of the Meteor experience.&lt;/p&gt;

&lt;h2 id=&quot;why-make-an-app&quot;&gt;Why Make An App?&lt;/h2&gt;

&lt;p&gt;I am actually very anti-materialism. I like to live my life as simply as possible. The accumulation of stuff is something that disgusts me. I’m a complete hypocrite, however. I collect worthless, pointless, Hot Wheels cars. I love them because I love cars, I like toys, and I know it’s most likely as close as I’ll ever get to owning an &lt;a href=&quot;http://static.christanfergus.com/images/diecast/IMG_20150630_CFH15.JPG&quot;&gt;Aston Martin Vantage&lt;/a&gt;, or better yet, a &lt;a href=&quot;http://static.christanfergus.com/images/diecast/DSC00760.jpg&quot;&gt;four cylinder Radio Flyer wagon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Whenever I’m out and about, I always check a store’s toy section and poke around to see if there is a car that piques my interest. I have hundreds of cars, which means that’s a lot to remember. I have purchased a lot of duplicate cars because I often forget which cars I already have. It became clear I needed a way to keep track of all this nonsense.&lt;/p&gt;

&lt;h2 id=&quot;what-technology-do-i-use&quot;&gt;What Technology Do I Use?&lt;/h2&gt;

&lt;p&gt;Let’s put aside for a moment the probability that something like this already exists. Whether it’s specific to a Hot Wheels collector, or just a simple form of db recording and retrieval, I’m sure it’s out there. The point here, though, is that I wanted to make an app all by m’self, so why not apply it to a direct need I have? To be honest, I’ve still not looked to see if anything like this exists. Not really much of a point now.&lt;/p&gt;

&lt;p&gt;I poked around to see what sort of technology or language I wanted to work in. In all honesty, it was always going to be something javascriptish. Angular? Nah. All Node? Maybe. Try out React? Not yet. I shot the question out on the Twitters and immediately got people hailing the wonders of Meteor. So, after much Googling, I thought it was worth going with.&lt;/p&gt;

&lt;p&gt;Here’s a breakdown of the resources that got me started, but not nearly a complete list of all the sites I hit looking for answers. Like every good developer, at any given time I had about fifteen tabs open split across Meteor docs and Stack Overflow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteortips.com/first-meteor-tutorial/&quot;&gt;Your First Meteor Application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meteor.com/&quot;&gt;The Meteor website&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SYqyWff6iMQ&quot;&gt;This talk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6xdHYMddtIw&quot;&gt;How to deploy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The Process&lt;/h2&gt;

&lt;h3 id=&quot;determining-the-minimum-viable-product-mvp&quot;&gt;Determining the Minimum Viable Product (MVP)&lt;/h3&gt;

&lt;p&gt;There were and still are many things I’d like this app to be, but I decided the best idea is to crank out an MVP and iterate on that.  I felt pretty comfortable with the basic tenants of Meteor, but if I didn’t define boundaries it would have been very easy for me to follow exciting or interesting rabbit trails of functionality, bells, and especially whistles. I always do this, by the way.&lt;/p&gt;

&lt;h4 id=&quot;in-scope-for-mvp&quot;&gt;In scope for MVP&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;I must be able to easily use the application on even the most basic handheld device&lt;/li&gt;
  &lt;li&gt;It must do one thing really well: quickly search a database of cars and tell me if I have it&lt;/li&gt;
  &lt;li&gt;It has to look good (I’m a designer first)&lt;/li&gt;
  &lt;li&gt;It must be web-based. Nothing proprietary here.&lt;/li&gt;
  &lt;li&gt;Simple text-only data input to record new cars&lt;/li&gt;
  &lt;li&gt;A page that displays a dump of all the cars in my collection&lt;/li&gt;
  &lt;li&gt;Basic accounts (keep my data safe)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;in-scope-for-future&quot;&gt;In scope for future&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Offline storage ability to access database in areas of low reception (big box stores have terrible cell reception)&lt;/li&gt;
  &lt;li&gt;Display single-car records enabling me to see specific car data including a photo&lt;/li&gt;
  &lt;li&gt;Enable device camera access to photograph cars when recording the data&lt;/li&gt;
  &lt;li&gt;Edit existing records&lt;/li&gt;
  &lt;li&gt;Sort and filter fields&lt;/li&gt;
  &lt;li&gt;Open app up to other users (wrap as Android app?)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ui-design&quot;&gt;UI Design&lt;/h3&gt;

&lt;p&gt;I had the design kicking around in illustrator for a while. It was important that I explore interesting concepts. This was the first time in quite a while that I’d had the opportunity to  design for myself and I wanted to really break out of what everyone else was doing. Ever notice how everything looks the same?&lt;/p&gt;

&lt;p&gt;Knowing the end result was going to be used primarily on a phone, I stuck to a restricted palette that skinned large, tappable content regions. The content and features themselves were purposefully kept to a minimum.&lt;/p&gt;

&lt;p&gt;While the design does of course scale up to desktop, I took the time to ensure the UI was useable across the spectrum. The design needs were accounted for up through contextual breakpoints. The breakpoints were determined by how each component reacted to the window size. This resulted in emphasized or deemphasized elements depending on anticipated scenarios.&lt;/p&gt;

&lt;p&gt;For instance, if I use the app on my desktop computer, I’m more interested in entering data and browsing cars. If I hit the app on my mobile device, I most likely need to quickly/easily look up a car to make sure I’m not buying a duplicate.&lt;/p&gt;

&lt;h3 id=&quot;data-design&quot;&gt;Data Design&lt;/h3&gt;

&lt;p&gt;Understanding that the core of this project is the car information, it was important I got that piece pretty nailed at the beginning. I created a spreadsheet in Google Docs and played around with the type of data I wanted to record. The end result were these fields:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Toy number&lt;/li&gt;
  &lt;li&gt;Image URL&lt;/li&gt;
  &lt;li&gt;Car model name&lt;/li&gt;
  &lt;li&gt;Storage bin location&lt;/li&gt;
  &lt;li&gt;Series title&lt;/li&gt;
  &lt;li&gt;Main color&lt;/li&gt;
  &lt;li&gt;Year&lt;/li&gt;
  &lt;li&gt;Series number&lt;/li&gt;
  &lt;li&gt;Collector number&lt;/li&gt;
  &lt;li&gt;Favourite (boolean)&lt;/li&gt;
  &lt;li&gt;Notes&lt;/li&gt;
  &lt;li&gt;Treasure hunt (boolean)&lt;/li&gt;
  &lt;li&gt;Date added to db&lt;/li&gt;
  &lt;li&gt;Created by (user ID supplied by Meteor)&lt;/li&gt;
  &lt;li&gt;Record object ID (by MongoDB)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;collecting-the-data&quot;&gt;Collecting the Data&lt;/h4&gt;

&lt;p&gt;To make sure I was satisfied with the type of data I wanted to collect, I recorded a handful of cars in Sheets first. I made a few tweaks to what would be the final fields, but for the most part, the final list you see above is what I started with.&lt;/p&gt;

&lt;p&gt;Out of this little spreadsheet came a massive project that even included me recruiting my wife for help in recording and organizing everything. I recorded all my cars on this spreadsheet with the intent of exporting the data to my app as a JSON file. This, however, ultimately proved problematic. While (through the use of an addon) I was able to export the sheet to a JSON file, MongoDB, my Meteor project, or a combination of the two never played well with it and I was never able to get the data import to work correctly. I solved this by exporting the data as a CSV. This worked swimmingly, however by doing so, MongoDB created objectIDs as opposed to _id for each document. This would later be an issue when trying to retrieve single documents from the collection. That’s another story. Hey, ultimately, it worked though and saved me from having to input 300+ cars twice.&lt;/p&gt;

&lt;h2 id=&quot;challenges--observations&quot;&gt;Challenges &amp;amp; Observations&lt;/h2&gt;

&lt;p&gt;It worked out that what I wanted to accomplish was fairly similar to some of the tutorials out there, so I found it very easy to translate what they were doing into my project. Initially, I just followed the tutorials, not worrying about my stuff, which I do recommend doing. Once I finally got to my project,  I was able to make better decisions that ultimately saved me time had I not had the initial experience. This was all good.&lt;/p&gt;

&lt;p&gt;There are a couple cautions, however. I have a foundational understanding and knowledge of JavaScript and, as advertised, found the barrier of entry very low. This was encouraging and exciting, but I feel also a little dangerous. Because you can crank something out so quickly and “easily”, one may not really know and understand what’s actually going on. It’s always dangerous when you don’t know the “why’s” behind what you’re doing since that usually leads to poor code quality, makes it hell to debug issues,  and even opens you up to performance and security issues. The latter reason is why even at the time of writing this, I’m hesitant to open my project up to other users until I have even more depth of understanding into how Meteor is handling things.&lt;/p&gt;

&lt;p&gt;So, if you find yourself starting out with Meteor, read up on how it handles publish and subscribe. I recommend you get your head around how this is handled. It’s easy to overlook that the reason Meteor is so easy to work with in the beginning is that it ships insecure. If you want to do anything other than mess around, you’ll need to take steps to get Meteor to a secure state. See this on &lt;a href=&quot;http://joshowens.me/meteor-security-101&quot;&gt;security.&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;packages--features&quot;&gt;Packages &amp;amp; Features&lt;/h2&gt;

&lt;p&gt;My project only uses a handful of packages, but that’s not to say there is a myriad of freaking sweet packages out there. You can see a full list at my &lt;a href=&quot;https://github.com/fergd/diecasttracker/blob/master/.meteor/packages&quot;&gt;Github&lt;/a&gt;. Here’s a highlight:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/matteodem/meteor-easy-search&quot;&gt;matteodem:easy-search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/iron-meteor/iron-router&quot;&gt;iron:router&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://atmospherejs.com/meteor/accounts-base&quot;&gt;accounts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fourseven/meteor-scss&quot;&gt;fourseven:scss&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;no-platform-is-an-island&quot;&gt;No Platform is an Island&lt;/h2&gt;

&lt;p&gt;In addition to creating the app, a couple other pieces became important: GitHub (vital for any project), Heroku, Mongolab.&lt;/p&gt;

&lt;h3 id=&quot;heroku&quot;&gt;Heroku&lt;/h3&gt;

&lt;p&gt;While Meteor kindly offers a free dev deployment, I quickly realized I needed more than that. Ultimately, I want to host the app myself on Digital Ocean, but until then, spinning up a service on Heroku was the best choice. By doing so, I incorporated a git hook that enabled me to push to Heroku whenever I had something stable enough make public.&lt;/p&gt;

&lt;h4 id=&quot;more-info&quot;&gt;More Info&lt;/h4&gt;

&lt;p&gt;It’s not an extremely easy process to get up and running on Heroku, and I had to push on it a little. Ultimately, I did &lt;a href=&quot;http://www.growthux.com/ux-html-css-js-growth-hack/installing-meteor-on-heroku&quot;&gt;this&lt;/a&gt; install but used &lt;a href=&quot;https://github.com/jordansissel/heroku-buildpack-meteor&quot;&gt;this buildpack&lt;/a&gt; (very important). Note: depending on when you read this, the buildpack may have changed. If you have problems building, this is one of the first things to check.&lt;/p&gt;

&lt;h3 id=&quot;mongolab&quot;&gt;Mongolab&lt;/h3&gt;

&lt;p&gt;I had never worked with an external database before this project and have to say I really like what Mongolab offers. Their free service is all I needed to get this project kicked off, and they supply all the important commands right there in the dashboard! So, when it came time to upload my CSV, I just copy/pasted their template, modded it, and voila!&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h2&gt;

&lt;p&gt;At the time of writing this, I have successfully achieved MVP status. Whoot! That means my car collection is accessible to me wherever I happen across Hot Wheels cars and I’ve been very pleased with the performance of the app. The lovely nature of the easy search plug in allows me to begin typing the car code and instantly I can see if there are any matches. In other words, the app is doing exactly what I want it to do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.christanfergus.com/images/quick-merc-find-gif.gif&quot; alt=&quot;Overviews of using the app&quot; class=&quot;post-image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But this is only the first step. I’ve really gotten a taste for the project, and really enjoy working in the Meteor ecosystem. While searching, data entry and document retrieval are all working, I will be integrating the app with camera phones and bolstering my accounts and security to create an app that I ultimately want to share.&lt;/p&gt;

&lt;p&gt;There’s a lot more learning and coding to do, but I’m game and I’ll continue working in the fantastic Meteor platform.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://static.christanfergus.com/images/quick-car-gif.gif&quot; alt=&quot;Overviews of using the app&quot; class=&quot;post-image&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;links&quot;&gt;Links&lt;/h1&gt;

&lt;h2 id=&quot;the-project&quot;&gt;The Project&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fergd/diecasttracker&quot;&gt;Github&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://diecasttracker.herokuapp.com&quot;&gt;Live project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;general-architecture-meteor-use--tutorials&quot;&gt;General Architecture, Meteor Use, &amp;amp; Tutorials&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://heroku.com&quot;&gt;Heroku&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mongolab.com/&quot;&gt;Mongolab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meteortips.com/first-meteor-tutorial&quot;&gt;Your First Meteor Application&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meteor.com&quot;&gt;The Meteor website&lt;/a&gt; (These docs are fantastic, well done Meteor!)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SYqyWff6iMQ&quot;&gt;This talk&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;publish-and-subscribe-information&quot;&gt;Publish and subscribe information&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.meteor.com/tutorials/blaze/publish-and-subscribe&quot;&gt;Pub &amp;amp; Sub&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.meteor.com/#/full/allow&quot;&gt;Allow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.discovermeteor.com/blog/meteor-methods-client-side-operations/&quot;&gt;Allow users to insert to a database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;security&quot;&gt;Security&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://joshowens.me/meteor-security-101&quot;&gt;Security 101&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;deployment&quot;&gt;Deployment&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6xdHYMddtIw&quot;&gt;How to deploy &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.growthux.com/ux-html-css-js-growth-hack/installing-meteor-on-heroku&quot;&gt;Heroku installation of Meteor &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jordansissel/heroku-buildpack-meteor buildpack&quot;&gt;Heroku buildpack (check for updates) &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 03 Jul 2015 00:00:00 -0600</pubDate>
        <link>http://christanfergus.com/diary-of-a-meteor-app-projects</link>
        <guid isPermaLink="true">http://christanfergus.com/diary-of-a-meteor-app-projects</guid>
        
        
        <category>web</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Reviving Craftsmanship</title>
        <description>&lt;h2 id=&quot;try-all-the-things&quot;&gt;Try All The Things!&lt;/h2&gt;
&lt;p&gt;The wonderful thing about doing web development with a team (as opposed to working alone in my musty basement) is the conversations we have about the industry. The conversations, often spirited, range from the technical to the philosophical. The one thing most topics have in common is the fact that what may be “current” and “interesting” today is not what was yesterday, and certainly will not be tomorrow. The tech world—a world I have chosen to be a part of—moves at a dizzying pace. No sooner had I grasped Grunt than Gulp came along as the hipster designer’s favourite way of getting out of doing things manually. Which javaScript framework should I go with? Damned if I know!&lt;/p&gt;

&lt;p&gt;Please don’t misunderstand, I love this (&lt;a href=&quot;http://www.commitstrip.com/en/2014/11/25/west-side-project-story/&quot; title=&quot;Web Comic on CommitStrip called Side Project&quot;&gt;appropriately illustrated here&lt;/a&gt;). I love how quickly we can get an app up and running with tools like Meteor. This stage in development has such a low bar of entry that very nearly anyone with a computer and desire can create a web page or app and even be successful.&lt;/p&gt;

&lt;p&gt;Success, however, in no way means quality. It’s that, dear reader, which ultimately leads me to my gripe. We have so much we can do, and sometimes bounce so quickly from tool to tool, that we forget a little thing called &lt;em&gt;craftsmanship&lt;/em&gt;. Or perhaps it’s not even forgotten, perhaps—actually likely—people never had it in the first place.&lt;/p&gt;

&lt;h2 id=&quot;getting-physical&quot;&gt;Getting Physical&lt;/h2&gt;
&lt;p&gt;I have a degree in graphic design. In my day (that’s right, I said it), design was a comparatively slow thing. For a comprehensive design degree, one had to learn the breadth of the visual: the fine arts encompassed painting, pastel, pencil, film photography, and mixed media. Of those mediums, the areas of figure study, still life, landscape, industrial, and more where explored. These were physical mediums. These mediums did not have an undo. I was forced to hone my craft and grow my skills one mistake and success at a time. I had to plan, coordinate and execute near flawlessness to even hope for a good grade. Of course, this wasn’t &lt;em&gt;all&lt;/em&gt; that long ago. We did the physical in tandem with the digital where we did all the usual things in the Corel, the Adobe suite: advertising and marketing design, web design, posters, etc.&lt;/p&gt;

&lt;p&gt;In addition, I took two technical writing classes to craft and learn how to clearly communicate. In all this, I took one whole HTML class where I wrote the markup in Windows 98’s Notepad and did all my layout in tables and frames (this was before Zeldman’s seminole &lt;a href=&quot;http://en.wikipedia.org/wiki/Designing_with_Web_Standards&quot;&gt;Designing with Web Standards&lt;/a&gt;).&lt;/p&gt;

&lt;h2 id=&quot;get-real&quot;&gt;Get Real&lt;/h2&gt;
&lt;p&gt;What am I saying? I suppose I’m saying that I see lots of stuff being put out there by talented designers, and the un-alike, that lacks craft. It may look good on the surface, but a slightly closer look shows that stuff just isn’t quite right. A physical example of this is illustrated so well by the Chinese knock-off industry. Devices, Cars… &lt;br /&gt;
&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/f/fa/Mini_Coopi%E2%84%A2.jpg&quot; alt=&quot;Chinese version of the Mini&quot; class=&quot;post-image&quot; /&gt; What about that massive image at the top of a website with a big fat arrow pointing down—really? This is good design?&lt;/p&gt;

&lt;p&gt;Lest I be the first to cast a stone, be aware I’m pointing some fingers right back at myself on this one. It’s precisely because it’s so easy to crank stuff out that I, too, hop on the bandwagon. With little concern for architecture or standards, I can churn out something pretty powerful, pretty quickly. Yes, there is a benefit to that. If you approach something in a lean manor, you get something out quickly and iterate the shit out of it. If you have the discipline to do so, I say continue on, good sir/madame, and we shall clean and refactor as we go. But do we? When we’re doing our own thing, do we finely craft our architecture? Do we take the time to truly understand our users and craft an experience to their needs? Do we spend time on the finer points of visual design—all for the hope that the user never notices our finely adjusted, viewport-width-appropriate line-height, but subconsciously has an easier time navigating and finding the information they need? I think we should—at least more than we currently do.&lt;/p&gt;

&lt;p&gt;A distinction should be made here, however. There’s stuff you ship, and there’s stuff you experiment with. It’s true, we could spend so much time “crafting” that we never ship, and I agree with Jobs that great artists ship, but crafting doesn’t mean not shipping. It means refining our process to allow room for it.&lt;/p&gt;

&lt;p&gt;I’m not going to craft an experimental app I’m working on that no one will ever see. I am, however, going to craft anything anyone other than my wife is going to see. I owe that to you, the user. If you dein me worthy enough to show you anything I have worked on, it’s the least I can do to craft, tailor, and make your experience in my design as useful and lovely as possible.&lt;/p&gt;

&lt;h2 id=&quot;get-crafty&quot;&gt;Get Crafty&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/post-images/crafted-compressor.jpg&quot; alt=&quot;Some stuff on a table that looks kinda crafty&quot; class=&quot;post-image&quot; /&gt;&lt;br /&gt;
We shouldn’t stop everything, shut out the world, and spend the next ten years becoming the very best in, well, whatever. I’m saying we should be conscious of an area we tend to slack off in, and work on that. Slowly ratchet up your discipline in color theory or cleaner, more performant JavaScript. Take the time to read some books on design theory and practice particular techniques. If you’ve never had formal training, take it upon yourself to improve the fundamentals. If you have had formal training, revisit the disciplines and techniques you learned all those years ago.&lt;/p&gt;

&lt;p&gt;With just a little extra effort, we can keep above the riff-raff and distinguish ourselves as attractive, crafty professionals.&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Apr 2015 00:00:00 -0600</pubDate>
        <link>http://christanfergus.com/reviving-craftsmanship/</link>
        <guid isPermaLink="true">http://christanfergus.com/reviving-craftsmanship/</guid>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Door To Door Organics Recipe Site Case Study</title>
        <description>&lt;h2 id=&quot;project-overview&quot;&gt;Project Overview&lt;/h2&gt;

&lt;h3 id=&quot;company-background&quot;&gt;Company Background&lt;/h3&gt;

&lt;p&gt;Door To Door Organics is an online organic produce and market delivery service that covers five locations nationwide.&lt;/p&gt;

&lt;h3 id=&quot;project-goal&quot;&gt;Project Goal&lt;/h3&gt;

&lt;p&gt;As part of the company’s commitment to their customers eating good food, Door To Door Organics decided to launch a recipe and meal planning “wing” to the website that would ultimately be incorporated into the future website shopping flow. The recipe site would bring the customer’s grocery box, with all of its ingredients, together with recipes to help provide inspiration in the kitchen and reduce food waste. This project would require:&lt;/p&gt;

&lt;ul class=&quot;disc&quot;&gt;
  &lt;li&gt;A brand new design and code infrastructure&lt;/li&gt;
  &lt;li&gt;An engaging user experience that would be easy to use and make people want to come back&lt;/li&gt;
  &lt;li&gt;Ultimately growth in customer engagement, retention, and sales.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;pulled-blockquote&quot;&gt;
  &lt;p&gt;Overall customer retention increased with a 17% increased customer conversion rate and an average 13% larger basket size.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;project-role&quot;&gt;Project Role&lt;/h3&gt;

&lt;p&gt;I was the designer on a three person team that also included a web developer and product manager.&lt;/p&gt;

&lt;h3 id=&quot;team&quot;&gt;Team&lt;/h3&gt;

&lt;ul class=&quot;disc&quot;&gt;
  &lt;li&gt;Kristin Lindquist - Product Manager&lt;/li&gt;
  &lt;li&gt;David Rudder - Senior Software Developer&lt;/li&gt;
  &lt;li&gt;Christan Fergus - Senior Web Designer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;h3 id=&quot;useability-design&quot;&gt;Useability Design&lt;/h3&gt;
&lt;p&gt;This project was an added feature that was not necessary to our customer’s core experience of modifying their orders and buying products. It was therefore important we make the recipe site extremely easy to use as a valuable enhancement to an existing shopping experience. We achieved this by endeavouring to only show the user relevant and meaningful information. Discovering the line between too little and too much was and is an on-going process.&lt;/p&gt;

&lt;h3 id=&quot;visual-amp-front-end-design&quot;&gt;Visual &amp;amp; Front-end Design&lt;/h3&gt;

&lt;p&gt;The design process started quickly based on the product manager’s wireframes and design briefs.  Moving quickly into this phase allowed us to get a good feel for how the design was going to work very early on. Working in an Agile environment provided the needed flexibility to revisit, test, and is some cases do away with concepts and designs throughout the entire process.&lt;/p&gt;

&lt;p&gt;The front end leveraged HTML5 and some newer elements of CSS3, however the requirement of supporting Internet Explorer 7 and up prohibited anything too fancy. Javascript was used a fair amount and necessary for not only enhancing the visual experience, but also as a conduit to serve up content via Ajax in some cases. Great care was taken to only use Javascript when absolutely necessary.&lt;/p&gt;

&lt;h3 id=&quot;back-end-design&quot;&gt;Back-end Design&lt;/h3&gt;

&lt;p&gt;David Rudder handled the software development, and we worked together through the whole project. The back end of the site was built utilizing the Java framework, Play. This, of course, was the core of the web site. Some requirements and complexities included:&lt;/p&gt;

&lt;ul class=&quot;disc&quot;&gt;
  &lt;li&gt;The ability to quickly sift through the user’s customer data, thus showing them relevant recipes based on their order and seasonal factors&lt;/li&gt;
  &lt;li&gt;The ability to purchase products directly from recipes&lt;/li&gt;
  &lt;li&gt;Provide a custom CMS for easy recipe input by the Door To Door team.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;user-testing&quot;&gt;User Testing&lt;/h3&gt;

&lt;p&gt;User testing was implemented late in the process, something that since has been modified in our team’s creative process, but we did do live user testing, think-aloud, and A/B testing and continue to perform tests even after release.&lt;/p&gt;

&lt;h3 id=&quot;challenges&quot;&gt;Challenges&lt;/h3&gt;

&lt;p&gt;This wasn’t a static recipe site, this was a recipe site that recommended recipes to you based on items that were in your weekly order. Because of this we needed to be able to detect which ingredients you had and didn’t have, and give you the ability to modify your order based on this information. The marriage of sales and recipes was a great one, but a concept full of complexity that had to be distilled and offered up quickly for the customer’s benefit. Knowing what data to give, when to give it, and most importantly, &lt;em&gt;how&lt;/em&gt;, was a major challenge.&lt;/p&gt;

&lt;p&gt;We also had a fair amount of information we needed to convey to the user in a very limited space. Part of the space limitation was because the recipe site was built as an evolutionary branch off of the existing site. That design presented limitations primarily because we didn’t want each area of the site looking drastically different to the user. We handled this challenge by reigning the design back in some places, removing elements that weren’t expressly needed, and also modifying some visual elements the existing site in minor ways.&lt;/p&gt;

&lt;h2 id=&quot;results-amp-beyond-release&quot;&gt;Results &amp;amp; Beyond Release&lt;/h2&gt;

&lt;p&gt;Feedback and site usage were extremely positive and we successfully created a fun and meaningful way for customers to plan their week in recipes. As a result we experienced&lt;/p&gt;

&lt;ul class=&quot;disc&quot;&gt;
  &lt;li&gt;Overall customer retention increased with a 17% increased customer conversion rate&lt;/li&gt;
  &lt;li&gt;On average 13% larger basket size.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As the Door To Door Organics recipe site has been live and active now for some time, we continue to respond to the data we receive and adjust accordingly. Since the original release, we have had a V1.5 release where we fixed some bugs and polished some functionality.&lt;/p&gt;

&lt;div class=&quot;slider&quot;&gt;
	&lt;ul class=&quot;bjqs&quot;&gt;
		&lt;li&gt;&lt;img src=&quot;/img/dtdo/recipe-find.jpg&quot; alt=&quot;Door To Door Organics Recipes&quot; /&gt;&lt;/li&gt;
		&lt;li&gt;&lt;img src=&quot;/img/dtdo/recipe-recipe.jpg&quot; alt=&quot;Easy to read recipes.&quot; /&gt;&lt;/li&gt;
		&lt;li&gt;&lt;img src=&quot;/img/dtdo/recipe-plan.jpg&quot; alt=&quot;Plan your week of meals.&quot; /&gt;&lt;/li&gt;
		&lt;li&gt;&lt;img src=&quot;/img/dtdo/recipe-bookmarks.jpg&quot; alt=&quot;Bookmark the meals you like best.&quot; /&gt;&lt;/li&gt;
		&lt;li&gt;&lt;img src=&quot;/img/dtdo/recipe-sbp.jpg&quot; alt=&quot;Purchase ingredients for your recipe.&quot; /&gt;&lt;/li&gt;
	&lt;/ul&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 06 May 2012 00:00:00 -0600</pubDate>
        <link>http://christanfergus.com/door-to-door-organics-recipe-site-case-study</link>
        <guid isPermaLink="true">http://christanfergus.com/door-to-door-organics-recipe-site-case-study</guid>
        
        
        <category>case-studies</category>
        
      </item>
    
  </channel>
</rss>
